"""
СПИСКИ.

Списки: знакомство

Задание 1

В коде списки выполняют ту же функцию, что и тележка в магазине.
Поэтому можно наполнить их чем-нибудь вкусным.
Сохрани в переменной shopping_list товары, которые нужно купить в магазине.
Пусть это будут: молоко, сахар, мука, яйца, разрыхлитель, ваниль. Выведи содержимое списка.

"""

shopping_list = ['молоко', 'сахар', 'мука', 'яйца', 'разрыхлитель', 'ваниль'] # Внеси в список всё необходимое
print(shopping_list)

"""

Длина списка и индексы

Задание 1

В прошлом уроке у тебя получилось создать переменную shopping_list и сохранить в ней несколько значений:
молоко, сахар, муку, яйца, разрыхлитель, ваниль.
Сейчас ты стоишь на кассе.
Посчитай, сколько товаров получилось. Выведи полученное значение.

"""

shopping_list = ['молоко', 'сахар', 'мука', 'яйца', 'разрыхлитель', 'ваниль']
# Всё необходимое уже в тележке
# Осталось только посчитать
count = len(shopping_list)
print(count)

"""
Списки и индексы: практика

Задание 1

Вспомни, из каких частей состоит типичный баг-репорт.
Это: «Заголовок», «Автор», «Исполнитель», «Версия», «Описание», «Критичность», «Приоритет».
Создай список bug_report с этими элементами и напечатай его содержимое.

"""

print('Очередной баг на проде')
bug_report = ['Заголовок', 'Автор', 'Исполнитель', 'Версия', 'Описание', 'Критичность', 'Приоритет']
print(bug_report)

"""
Задание 2

Теперь нужно определить приоритет бага. Он может быть высокий, средний и низкий. 
Уровни приоритета нужно добавить в новый список priority.
Только вместо строковых значений будем использовать числа.
Пусть высокому приоритет соответствует 1,  среднему — 2, а низкому — 3.
У отловленного бага средний приоритет. Его и нужно вывести.

"""

# добавь числовые значения приоритетов по порядку, начиная с 1
priority = [1, 2, 3]

# укажи индекс среднего приоритета
medium_priority_index = 1

print('Баг с приоритетом:', priority[medium_priority_index])


"""
Задание 3

Чаще всего пользуются пятиуровневой системой критичности. Баг бывает:
«Блокирующий», «Критический», «Значительный», «Незначительный», «Тривиальный».
Объяви переменную severity_len и сохрани в неё количество уровней критичности бага.
Посчитай количество вызовом функции len().
Выведи на экран самый последний, тривиальный уровень, используя переменную severity_len.

"""

severity_list = ['Блокирующий', 'Критический', 'Значительный', 'Незначительный', 'Тривиальный']

# количество уровней критичности = длине списка
severity_len = len(severity_list)

print('Уровень критичности бага: ' + severity_list[severity_len - 1])


"""

Операции со списками: append(), insert() и remove()

Задание 1

Хоббиты Мерри и Пиппин тоже хотят присоединиться.
Добавь их в список по порядку.

"""

hobbits = ['Фродо', 'Сэм']

# сначала включи в список «Мерри»
hobbits.append('Мерри')

# затем «Пиппин»
hobbits.append('Пиппин')

print(hobbits)

"""
Задание 2

В список hobbits попал Бильбо. Удали его с помощью remove().

"""

hobbits = ['Фродо', 'Cэм', 'Бильбо', 'Мерри', 'Пиппин']

# Допиши код, чтобы удалить Бильбо
hobbits.remove('Бильбо')

print(hobbits)

"""
Операции со списками: pop() и in

Задание 1

Попробуй дописать код так, чтобы он удалил Фродо из lst и добавил его в начало списка hobbits.
Используй метод insert().

"""

hobbits = ['Cэм', 'Пиппин']

lst = ['Мерри', 'Фродо']

# удали из lst Фродо и верни его в начало списка hobbits
hobbits.insert(0,lst.pop(1))

print(hobbits)
print(lst)

"""
Задание 2

Фродо надел кольцо и пропал. Хоббиты решили разделиться, чтобы найти его.
Из списка hobbits необходимо удалить всех хоббитов по одному, используя изученные методы. Вот, что нужно сделать:
удали сначала Фродо методом pop();
удали по очереди Мерри и Пиппин методом remove();
удали Сэма методом pop().

"""

hobbits = ['Фродо', 'Сэм', 'Мерри', 'Пиппин']

# удали из списка всех Хоббитов (разными способами)
hobbits.pop(0)
hobbits.remove('Мерри')
hobbits.remove('Пиппин')
hobbits.pop()

print(hobbits)

"""

Задание 3

Сейчас список hobbits пуст. Добавь в него два элемента: 
сначала Фродо методом append();;
затем — Сэма методом insert().
Пусть Сэм будет последним в списке.
После этого:
удали Сэма с помощью pop();
проверь, есть ли Сэм в списке с помощью оператора in.

"""

hobbits = []

# Добавь в список Фродо
hobbits.append('Фродо')

# Теперь добавь Сэма
hobbits.insert(1, 'Сэм')

# Удали Сэма
hobbits.pop(1)

# Проверь, есть ли Сэм в списке
print('Сэм' in hobbits)

print(hobbits)

"""

Сложение списков

Задание 1

Пора завершить объединение Братства и внести в список недостающих героев.
Добавь к списку fellowship новый список last_members.

"""

fellowship = ['Фродо', 'Сэм', 'Мерри', 'Пиппин', 'Гэндальф', 'Арагорн']

last_members = ['Леголас', 'Гимли', 'Боромир']

# почти все в сборе
fellowship = fellowship + last_members

print('Братство кольца: ', fellowship)

"""

Задание 2

В Братстве кольца объединились представители разных рас.
А список может хранить другие списки с разными типами данных.
Попробуй сложить списки ниже таким образом, чтобы функция print() вывела на экран: «Среди нас:
[1, 'Волшебник', 2, 'Человека', 1, 'Эльф', 1, 'Гном', 4, 'Хоббита']»

"""

count_1 = [1]
count_2 = [2]
count_4 = [4]

wizard = ['Волшебник']
human = ['Человека']
elf = ['Эльф']
dwarf = ['Гном']
hobbits = ['Хоббита']

fellowship_of_the_ring = count_1 + wizard + count_2 + human + count_1 + elf + count_1 + dwarf + count_4 + hobbits
# Должно получиться:
# [1, 'Волшебник', 2, 'Человека', 1, 'Эльф', 1, 'Гном', 4, 'Хоббита']

print('Среди нас: ', fellowship_of_the_ring)

"""

Списки списков и копирование

Задание 2

Коллекционер заказал копии двух картин. А потом решил добавить в коллекцию ещё один экземпляр.
Картины, которые он хочет копировать, хранятся в списке paintings.

Тебе нужно:

скопировать paintings в переменную collection;
добавить в новый список элемент «Витрувианский человек».
Для добавления используй метод append().

"""

from copy import deepcopy

paintings = ['Мона Лиза', 'Дама с Горностаем']

# Твоё решение

collection = deepcopy(paintings)
collection.append('Витрувианский человек')

print('В коллекции теперь:', collection)

"""

Операции со списками: практика

Задание

"""

priority = ['Значительный', 'Средний', 'Тривиальный']

severity = ['Низкий', 'Незначительный', 'Блокирующий', 'Высокий', 'Критический']


... # твоё решение
# удаляю Тривальный из priority,а потом вставляю в конец severity
severity.append(priority.pop())

#удаляю из severity Высокий и вставляю его в начало списка priority
priority.insert(0,severity.pop(-2))

# Сейчас в priority Высокий, Значительный, Средний
# Сейчас в severity 'Низкий', 'Незначительный', 'Блокирующий', 'Критический','Тривиальный'

#удаляю из priority Значительный и вставляю его на 3-е место списка severity
severity.insert(-3,priority.pop(-2))
# Сейчас в severity 'Низкий', 'Незначительный', Значительный, 'Блокирующий', 'Критический','Тривиальный'

#удаляю из severity Низкий и вставляю его на последнее место списка priority
priority.append(severity.pop(0))
# Сейчас в priority ['Высокий', 'Средний', 'Низкий']

# Сейчас в severity ''Незначительный', Значительный, 'Блокирующий', 'Критический','Тривиальный'

#удаляю из severity Блокирующий и вставляю его на первое место списка severity
severity.insert(0,severity.pop(-3))
# Сейчас в severity 'Блокирующий', 'Незначительный', Значительный,  'Критический','Тривиальный'

#удаляю из severity Критический и вставляю его на ВТОРОЕ место списка severity
severity.insert(1,severity.pop(-2))
# Сейчас в severity 'Блокирующий', 'Критический', 'Незначительный', Значительный, 'Тривиальный'

#удаляю из severity Значительный и вставляю его на ТРЕТЬЕ место списка severity
severity.insert(2,severity.pop(-2))
# Сейчас в severity 'Блокирующий', 'Критический', Значительный, 'Незначительный', 'Тривиальный'

# Сейчас в priority ['Критический', 'Средний', 'Низкий']
# Сейчас в severity ['Блокирующий', 'Высокий', 'Значительный', 'Незначительный', 'Тривиальный']

#удаляю из priority КРИТИЧЕСКИЙ и вставляю его на 3-е место списка severity
severity.insert(1,priority.pop(0))

priority.insert(0,severity.pop(2))

print(priority)
# Должно получиться:
# ['Высокий', 'Средний', 'Низкий']

print(severity)
# Должно получиться:
# ['Блокирующий', 'Критический', 'Значительный', 'Незначительный', 'Тривиальный']




