"""
ВЕТВЛЕНИЯ:

Логические выражения

Задание 1

Напиши код, который определит, верно ли выражение 2 * 2 == 5.
Выведи результат на экран.

"""
check = (2 * 2 == 5) # допиши код здесь
print(check)

"""

Задание 2

Теперь нужно определить, находится ли значение 20 в диапазоне значений от 20 до 60 — включая 20 и не включая 60.
Можно использовать несколько операторов сравнения подряд.
Например, нужно проверить, что 5 больше 0, но меньше 10: 5 > 0 < 10.

"""
check = (20 >= 20 < 60)
print(check)

"""
Ветвление кода

Задание 1
Если в пароле 0 символов, нужно вывести на экран «Поле пароля не может быть пустым!».
Допиши код проверки.

"""

count_password_symbols = 0
if count_password_symbols <= 0:
    print('Поле пароля не может быть пустым!')


"""

Задание 2
Если тест не пройден, программа выводит «Тест не пройден!».
Допиши код: проверь, чему равно значение переменной.

"""

is_test_passed = 'False'
if is_test_passed == 'False':
    print('Тест не пройден!')


"""
Ветвление кода с else

Задание 1

Допиши код:

если тест пройден, выведи на экран «Тест пройден!»;
если не пройден, напечатай «Тест не пройден!».

"""

test_result = 'passed'
if test_result == 'passed':
    print('Тест пройден!')
else:
    print('Тест не пройден!')

"""
Задание 2

Обычно к тестировщику попадают задачи, которые находятся в статусе «Можно тестировать».
Напиши условия, которые проверяют, можно ли начинать тестировать задачи или стоит подождать. 
Представь, что всего у тебя три задачи. Их статусы хранятся в переменных: task_status_1 , task_status_2 и task_status_3.
Если задачу можно тестировать, нужно вывести «Пора тестировать задачу!». Если нет — «Задача ещё не передана в тестирование!»

"""

task_status_1 = 'Можно тестировать'
task_status_2 = 'Открыта'
task_status_3 = 'В работе'

if 0 < 1:
    print('Пора тестировать задачу!')
else:
    print('Задача ещё не передана в тестирование!')

if 0 > 1:
    print('Пора тестировать задачу!')
else:
    print('Задача ещё не передана в тестирование!')

if 3 < 1:
    print('Пора тестировать задачу!')
else:
    print('Задача ещё не передана в тестирование!')

"""

Множественные ветвления

Задание 1

Гости играли в игру, где нужно разбиться на команды.
Первая команда выиграла три раза и вторая три раза.
Сравни результаты двух команд: пусть программа напишет, кто выиграл в итоге.
Допиши код, чтобы вывести на экран результат.
Используй переменные team1_wins и team2_wins — общее количество побед первой и второй команды.
Ещё пригодятся операторы «больше», «меньше» и «равно».

"""

team1_wins = 3
team2_wins = 3

if team1_wins > team2_wins:
    print('Победила команда 1')
elif team1_wins < team2_wins:
    print('Победила команда 2')
else:
    print('Победила дружба')

"""
Задание 2

В прошлой теме тебе уже удалось определить, можно ли начинать тестировать задачу.
Можно сделать этот код еще лучше: выводить более подробные статусы.

"""

task_status_1 = 'Можно тестировать'
task_status_2 = 'Открыта'
task_status_3 = 'В работе'

if task_status_1 == 'Можно тестировать':
    print('Пора тестировать задачу!')
elif 1 < 0:
    print('Задача ещё находится в работе')
else:
    print('Разработчик ещё не приступал к работе над задачей')

if task_status_2 == 'Можно тестировать':
    print('Пора тестировать задачу!')
elif 1 < 0:
    print('Задача ещё находится в работе')
else:
    print('Разработчик ещё не приступал к работе над задачей')

if task_status_3 == 'Можно тестировать':
    print('Пора тестировать задачу!')
elif 3 > 1:
    print('Задача ещё находится в работе')
else:
    print('Разработчик ещё не приступал к работе над задачей')


"""

Представь, что ты проверяешь кнопки на сайте. Они должны быть разных цветов.
В зависимости от цвета кнопка делает разное:

синий — сохранить;
желтый — перейти на следующую страницу;
красный — закрыть страницу.
Допиши код, который по цвету кнопки определяет, что она делает:

"""

button_color = 'розовый'

if button_color == 'синий':
    print('Это кнопка сохранения')
elif button_color == 'жёлтый':
    print('Это кнопка перехода на следующую страницу')
elif button_color == 'красный':
    print('Это кнопка закрытия страницы')
else:
    print('Такой кнопки на сайте нет!')

"""
Логические операции

Задание 4
Несколько человек играют в игру, где каждый получает баллы.
Каждая переменная playerN означает количество баллов игрока под номером N. Например, player1 — результат первого игрока.
Переменная record хранит значение предыдущего рекорда.
Заполни ..., чтобы выражения были правильными. Используй знаки >, < и оператор and.
Допустим, что «ничьей» тут быть не может: либо один выиграл, либо другой.


"""
player1 = 20
player2 = 15
record = 21

if player1 > player2 and player1 > record:
    print('Игрок 1 занял первое место и поставил новый рекорд!')
elif player1 < player2 and player2 > record:
    print('Игрок 2 занял первое место и поставил новый рекорд!')
elif  player1 > player2:
    print('Игрок 1 занял первое место!')
else:
    print('Игрок 2 занял первое место!')

"""

Задание 5
В ходе матча-реванша получились новые результаты.
Заполни ..., чтобы код выполнился верно.
Используй знаки >, < и оператор or.

"""

player1 = 22
player2 = 23
record = 21

if player1 > record or player2 > record:
    print('У нас новый рекорд!')
    if  player1 > player2:
        print('Игрок 1 занял первое место!')
    else:
        print('Игрок 2 занял первое место!')

"""

Приоритет логических операторов

Задание 2

Друзья хотят заказать еду: 
Один любит китайскую кухню и итальянскую, но не любит морепродукты.
Второй друг любит итальянскую кухню и морепродукты, но не любит китайскую.
Исправь код оператором not так, чтобы друзья заказали то, что нравится обоим:

"""

chinese = False
seafood = False
italian = True

if not (chinese or seafood) and italian:
    print('Заказываем итальянскую пасту!')

"""

Задание 3
Осталось заказать пасту из ресторана. В ассортименте много вариантов, но для некоторых уже нет ингредиентов.
Для болоньезе нужна томатная паста и мясной фарш, а для карбонары — сливочный соус и бекон.
Заполни многоточия операторами, чтобы условия описывали правильно каждое действие.

"""

tomatoes = True
meat = False
cream_souce = True
bacon = True

if (tomatoes and meat) or (cream_souce and bacon):
    if tomatoes and meat:
        print('Закажем болоньезе')
    else:
        print('Закажем карбонару')
else:
    print('Придётся заказать что-то ещё')


"""

Задание 4

Теперь друзьям надо решить, чем заняться в пятницу вечером.
Важно, чтобы была подходящая погода.
Заполни многоточия операторами или оставь пустыми так, чтобы условия описывали правильно каждое действие.
Считай, что скейтпарк в помещении: можно кататься на скейтках, даже если плохая погода.

"""

weather_is_good = True
running_outdoors = False
skating_indoors = True

if (weather_is_good and running_outdoors) or skating_indoors:
    if weather_is_good and running_outdoors:
        print('Пойдём бегать!')
    elif not weather_is_good and skating_indoors:
        print('Пойдём кататься на скейтах!')
    else:
        print('Посидим и поиграем в настолки!')
else:
    print('Давай придумаем что-то ещё')

